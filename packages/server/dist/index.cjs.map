{"version":3,"sources":["../src/app.ts","../src/trpc/index.ts","../src/modules/user/signup/index.ts","../src/entities/index.ts","../src/entities/User.ts","../src/utils/validation.ts","../src/entities/Project.ts","../src/entities/Workflow.ts","../src/entities/WorkflowStatus.ts","../src/entities/Issue.ts","../src/entities/Status.ts","../src/entities/WorkflowTransition.ts","../src/config.ts","../src/modules/user/login/index.ts","../src/modules/user/tokenPayload.ts","../src/modules/user/index.ts","../src/modules/project/create/index.ts","../src/trpc/authenticatedProcedure/index.ts","../src/trpc/authenticatedProcedure/buildAuthenticatedProcedure.ts","../src/modules/project/find/index.ts","../src/modules/project/get/index.ts","../src/modules/project/getAllByUser/index.ts","../src/modules/project/index.ts","../src/modules/workflow/create/index.ts","../src/modules/workflow/find/index.ts","../src/modules/workflow/get/index.ts","../src/modules/workflow/index.ts","../src/modules/issue/create/index.ts","../src/modules/issue/getAllByProjectId/index.ts","../src/modules/issue/find/index.ts","../src/modules/issue/index.ts","../src/modules/status/create/index.ts","../src/modules/status/get/index.ts","../src/modules/status/find/index.ts","../src/modules/status/index.ts","../src/modules/index.ts","../src/database/index.ts","../src/index.ts"],"sourcesContent":["import express from 'express'\nimport {\n  createExpressMiddleware,\n  type CreateExpressContextOptions,\n} from '@trpc/server/adapters/express'\nimport cors from 'cors'\nimport type { Database } from './database'\nimport { appRouter } from './modules'\nimport type { Context } from './trpc'\n\nexport default function createApp(db: Database) {\n  const app = express()\n\n  app.use(cors())\n  app.use(express.json())\n\n  app.use('/health', (_, res) => {\n    res.status(200).send('OK')\n  })\n\n  app.use(\n    '/v1/trpc',\n    createExpressMiddleware({\n      createContext: ({ req, res }: CreateExpressContextOptions): Context => ({\n        db,\n        req,\n        res,\n      }),\n\n      router: appRouter,\n    })\n  )\n\n  return app\n}\n","import { initTRPC } from '@trpc/server'\nimport type { Request, Response } from 'express'\nimport type { AuthUser } from '@server/entities/User'\nimport type { Database } from '@server/database'\nimport SuperJSON from 'superjson'\nimport { ZodError } from 'zod'\nimport { fromZodError } from 'zod-validation-error'\n\nexport type Context = {\n  db: Database\n  req?: Request\n  res?: Response\n  authUser?: AuthUser\n}\n\nexport type ContextMinimal = Pick<Context, 'db'>\n\nconst t = initTRPC.context<Context>().create({\n  transformer: SuperJSON,\n  errorFormatter(opts) {\n    const { shape, error } = opts\n\n    if (error.cause instanceof ZodError) {\n      const validationError = fromZodError(error.cause)\n\n      return {\n        ...shape,\n        data: {\n          message: validationError.message,\n        },\n      }\n    }\n\n    return shape\n  },\n})\n\nexport const {\n  middleware,\n  router,\n  procedure: publicProcedure,\n  createCallerFactory,\n  mergeRouters,\n} = t\n","import bcrypt from 'bcrypt'\nimport { publicProcedure } from '@server/trpc'\nimport { User } from '@server/entities'\nimport config from '@server/config'\nimport { userSchema } from '@server/entities/User'\nimport { TRPCError } from '@trpc/server'\n\nexport default publicProcedure\n  .input(\n    userSchema.pick({\n      email: true,\n      password: true,\n    })\n  )\n  .mutation(async ({ input: { email, password }, ctx: { db } }) => {\n    const hash = await bcrypt.hash(password, config.auth.passwordCost)\n\n    try {\n      const user = await db.getRepository(User).save({\n        email,\n        password: hash,\n      })\n\n      return {\n        id: user.id,\n        email: user.email,\n      }\n    } catch (error) {\n      if (!(error instanceof Error)) {\n        throw error\n      }\n\n      if (error.message.includes('duplicate key')) {\n        throw new TRPCError({\n          code: 'BAD_REQUEST',\n          message: 'User with this email already exists',\n        })\n      }\n\n      throw error\n    }\n  })\n","export { User } from './User'\nexport { Project } from './Project'\nexport { Issue } from './Issue'\nexport { Workflow } from './Workflow'\nexport { Status } from './Status'\nexport { WorkflowStatus } from './WorkflowStatus'\nexport { WorkflowTransition } from './WorkflowTransition'\n","import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm'\nimport { IsEmail } from 'class-validator'\nimport { z } from 'zod'\nimport { validates } from '@server/utils/validation'\nimport { Project } from './Project'\nimport { Issue } from './Issue'\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('increment')\n  id: number\n\n  @Column('text', { unique: true })\n  @IsEmail()\n  email: string\n\n  @Column('text', { select: false })\n  password: string\n\n  @ManyToMany(() => Project, { cascade: ['insert', 'update'] })\n  @JoinTable({\n    name: 'project_users',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'project_id',\n      referencedColumnName: 'id',\n    },\n  })\n  projects: Project[]\n\n  @OneToMany(() => Issue, (issue) => issue.reporter)\n  createdIssues: Issue[]\n\n  @ManyToMany(() => Issue, (issue) => issue.assignees)\n  assignedIssues: Issue[]\n}\n\nexport type UserBare = Omit<\n  User,\n  'projects' | 'createdIssues' | 'assignedIssues'\n>\n\nexport const userSchema = validates<UserBare>().with({\n  id: z.number().int().positive(),\n  email: z.string().trim().toLowerCase().email(),\n  password: z.string().min(8).max(64),\n})\n\nexport const userInsertSchema = userSchema.omit({ id: true })\n\nexport type UserSchema = z.infer<typeof userInsertSchema>\n\nexport type AuthUser = Pick<User, 'id'>\n\nexport const authUserSchema = validates<AuthUser>().with({\n  id: z.number().int().positive(),\n})\n","import { z } from 'zod'\n\n// Source: https://github.com/colinhacks/zod/issues/372#issuecomment-1280054492\ntype Validates<Model> = {\n  [key in keyof Model]-?: undefined extends Model[key]\n    ? null extends Model[key]\n      ? z.ZodNullableType<z.ZodOptionalType<z.ZodType<Model[key]>>>\n      : z.ZodOptionalType<z.ZodType<Model[key]>>\n    : null extends Model[key]\n      ? z.ZodNullableType<z.ZodType<Model[key]>>\n      : z.ZodType<Model[key]>\n}\n\nexport function validates<Model = never>() {\n  return {\n    with: <\n      Schema extends Validates<Model> & {\n        [unknownKey in Exclude<keyof Schema, keyof Model>]: never\n      },\n    >(\n      schema: Schema\n    ) => z.object(schema),\n  }\n}\n","import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from 'typeorm'\nimport { z } from 'zod'\nimport { validates } from '@server/utils/validation'\nimport { User } from './User'\nimport { Workflow } from './Workflow'\nimport { Issue } from './Issue'\n\n@Entity()\nexport class Project {\n  @PrimaryGeneratedColumn('increment')\n  id: number\n\n  @Column('text')\n  name: string\n\n  @ManyToOne(() => Workflow, (workflow) => workflow.projects)\n  workflow: Workflow\n\n  @ManyToMany(() => User, { cascade: ['insert', 'update'] })\n  @JoinTable({\n    name: 'project_users',\n    joinColumn: {\n      name: 'project_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n  })\n  users: User[]\n\n  @OneToMany(() => Issue, (issue) => issue.project)\n  issues: Issue[]\n}\n\nexport type ProjectBare = Omit<Project, 'workflow' | 'users' | 'issues'>\n\nexport const projectSchema = validates<ProjectBare>().with({\n  id: z.number().int().positive(),\n  name: z\n    .string()\n    .trim()\n    .min(1, 'Project name must be at least 1 character long')\n    .max(20),\n})\n\nexport const projectInsertSchema = projectSchema.omit({ id: true })\n\nexport type ProjectInsert = z.infer<typeof projectInsertSchema>\n","import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm'\nimport { z } from 'zod'\nimport { validates } from '@server/utils/validation'\nimport { Project } from './Project'\nimport { WorkflowStatus } from './WorkflowStatus'\nimport { WorkflowTransition } from './WorkflowTransition'\n\n@Entity()\nexport class Workflow {\n  @PrimaryGeneratedColumn('increment')\n  id: number\n\n  @Column('text', { unique: true })\n  name: string\n\n  @OneToMany(() => Project, (project) => project.workflow)\n  projects: Project[]\n\n  @OneToMany(() => WorkflowStatus, (workflowStatus) => workflowStatus.workflow)\n  statuses: WorkflowStatus[]\n\n  @OneToMany(\n    () => WorkflowTransition,\n    (workflowTransition) => workflowTransition.workflow\n  )\n  transitions: WorkflowTransition[]\n}\n\nexport type WorkflowBare = Omit<\n  Workflow,\n  'projects' | 'statuses' | 'transitions'\n>\n\nexport const workflowSchema = validates<WorkflowBare>().with({\n  id: z.number().int().positive(),\n  name: z\n    .string()\n    .trim()\n    .min(2, 'Workflow name must be at least 1 character long')\n    .max(100),\n})\n\nexport const workflowInsertSchema = workflowSchema.omit({ id: true })\n\nexport type InsertWorkflow = z.infer<typeof workflowInsertSchema>\n","import { Entity, ManyToOne, OneToMany, PrimaryGeneratedColumn } from 'typeorm'\nimport { z } from 'zod'\nimport { validates } from '@server/utils/validation'\nimport { Workflow } from './Workflow'\nimport { Issue } from './Issue'\nimport { Status } from './Status'\n\n@Entity()\nexport class WorkflowStatus {\n  @PrimaryGeneratedColumn('increment')\n  id: number\n\n  @ManyToOne(() => Workflow, (workflow) => workflow.statuses)\n  workflow: Workflow\n\n  @OneToMany(() => Issue, (issue) => issue.workflowStatus)\n  issues: Issue[]\n\n  @ManyToOne(() => Status, (status) => status.workflowStatuses)\n  status: Status\n}\n\nexport type WorkflowStatusBare = Omit<\n  WorkflowStatus,\n  'workflow' | 'issues' | 'status'\n>\n\nexport const workflowStatusSchema = validates<WorkflowStatusBare>().with({\n  id: z.number().int().positive(),\n})\n","import {\n  Column,\n  Entity,\n  ManyToMany,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm'\nimport { z } from 'zod'\nimport { validates } from '@server/utils/validation'\nimport { Project } from './Project'\nimport { User } from './User'\nimport { WorkflowStatus } from './WorkflowStatus'\n\n@Entity()\nexport class Issue {\n  @PrimaryGeneratedColumn('increment')\n  id: number\n\n  @Column('text')\n  title: string\n\n  @Column('text')\n  description: string\n\n  @ManyToOne(() => WorkflowStatus, (workflowStatus) => workflowStatus.issues)\n  workflowStatus: WorkflowStatus\n\n  @ManyToOne(() => User, (user) => user.createdIssues)\n  reporter: User\n\n  @ManyToMany(() => User, (user) => user.assignedIssues)\n  assignees: User[]\n\n  @ManyToOne(() => Project, (project) => project.issues)\n  project: Project\n}\n\nexport type IssueBare = Omit<\n  Issue,\n  'workflowStatus' | 'reporter' | 'assignees' | 'project'\n>\n\nexport const issueSchema = validates<IssueBare>().with({\n  id: z.number().int().positive(),\n  title: z.string().trim().min(1).max(20),\n  description: z.string().trim().min(1).max(255),\n})\n\nexport const issueInsertSchema = issueSchema.omit({ id: true })\n\nexport type IssueInsert = z.infer<typeof issueInsertSchema>\n","import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm'\nimport { z } from 'zod'\nimport { validates } from '@server/utils/validation'\nimport { WorkflowStatus } from './WorkflowStatus'\nimport { WorkflowTransition } from './WorkflowTransition'\n\n@Entity()\nexport class Status {\n  @PrimaryGeneratedColumn('increment')\n  id: number\n\n  @Column('text')\n  name: string\n\n  @OneToMany(() => WorkflowStatus, (workflowStatus) => workflowStatus.status)\n  workflowStatuses: WorkflowStatus[]\n\n  @OneToMany(\n    () => WorkflowTransition,\n    (workflowTransition) => workflowTransition.fromStatus\n  )\n  fromTransitions: WorkflowTransition[]\n\n  @OneToMany(\n    () => WorkflowTransition,\n    (workflowTransition) => workflowTransition.toStatus\n  )\n  toTransitions: WorkflowTransition[]\n}\n\nexport type StatusBare = Omit<\n  Status,\n  'workflowStatuses' | 'fromTransitions' | 'toTransitions'\n>\n\nexport const statusSchema = validates<StatusBare>().with({\n  id: z.number().int().positive(),\n  name: z.string().min(1).max(20),\n})\n\nexport const statusInsertSchema = statusSchema.omit({ id: true })\n\nexport type StatusInsert = z.infer<typeof statusInsertSchema>\n","import { Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm'\nimport { Workflow } from './Workflow'\nimport { Status } from './Status'\n\n@Entity()\nexport class WorkflowTransition {\n  @PrimaryGeneratedColumn('increment')\n  id: number\n\n  @ManyToOne(() => Workflow, (workflow) => workflow.transitions)\n  workflow: Workflow\n\n  @ManyToOne(() => Status, (status) => status.fromTransitions)\n  fromStatus: Status\n\n  @ManyToOne(() => Status, (status) => status.toTransitions)\n  toStatus: Status\n}\n","import 'dotenv/config'\nimport z from 'zod'\n\nconst { env } = process\n\nif (!env.NODE_ENV) env.NODE_ENV = 'development'\n\nconst isTest = env.NODE_ENV === 'test'\nconst isDevTest = env.NODE_ENV === 'development' || isTest\nconst isInMemory = env.DB_TYPE === 'pg-mem'\n\nconst schema = z\n  .object({\n    env: z\n      .enum(['development', 'production', 'staging', 'test'])\n      .default('development'),\n    isCi: z.boolean().default(false),\n    port: z.coerce.number().default(8080),\n\n    auth: z.object({\n      tokenKey: z.string().default(() => {\n        if (isDevTest) {\n          return ''\n        }\n\n        throw new Error('You must provide a token key in production env!')\n      }),\n      expiresIn: z.string().default('7d'),\n      passwordCost: z.coerce.number().default(isDevTest ? 6 : 12),\n    }),\n\n    database: z.object({\n      type: z.enum(['postgres', 'pg-mem']).default('postgres'),\n      host: z.string().default('localhost'),\n      port: z.coerce.number().default(5432),\n      database: isInMemory ? z.string().optional() : z.string(),\n      username: isInMemory ? z.string().optional() : z.string(),\n      password: isInMemory ? z.string().optional() : z.string(),\n\n      logging: z.preprocess(coerceBoolean, z.boolean().default(isDevTest)),\n      synchronize: z.preprocess(coerceBoolean, z.boolean().default(isDevTest)),\n    }),\n  })\n  .readonly()\n\nconst config = schema.parse({\n  env: env.NODE_ENV,\n  port: env.PORT,\n  isCi: env.CI,\n\n  auth: {\n    tokenKey: env.TOKEN_KEY,\n    expiresIn: env.TOKEN_EXPIRES_IN,\n    passwordCost: env.PASSWORD_COST,\n  },\n\n  database: {\n    type: env.DB_TYPE,\n    host: env.DB_HOST,\n    port: env.DB_PORT,\n    database: env.DB_NAME,\n    username: env.DB_USER,\n    password: env.DB_PASSWORD,\n    logging: env.DB_LOGGING,\n    synchronize: env.DB_SYNC,\n  },\n})\n\nexport default config\n\nfunction coerceBoolean(value: unknown) {\n  if (typeof value === 'string') {\n    return value === 'true' || value === '1'\n  }\n\n  return undefined\n}\n","import bcrypt from 'bcrypt'\nimport config from '@server/config'\nimport jsonwebtoken from 'jsonwebtoken'\nimport { publicProcedure } from '@server/trpc'\nimport { User } from '@server/entities'\nimport { TRPCError } from '@trpc/server'\nimport { userSchema } from '@server/entities/User'\nimport { prepareTokenPayload } from '../tokenPayload'\n\nconst { expiresIn, tokenKey } = config.auth\n\nexport default publicProcedure\n  .input(\n    userSchema.pick({\n      email: true,\n      password: true,\n    })\n  )\n  .mutation(async ({ input: { email, password }, ctx: { db } }) => {\n    const user = (await db.getRepository(User).findOne({\n      select: {\n        id: true,\n        password: true,\n      },\n      where: {\n        email,\n      },\n    })) as Pick<User, 'id' | 'password'> | undefined\n\n    if (!user) {\n      throw new TRPCError({\n        code: 'UNAUTHORIZED',\n        message: 'We could not find an account with this email address',\n      })\n    }\n\n    const passwordMatch = await bcrypt.compare(password, user.password)\n\n    if (!passwordMatch) {\n      throw new TRPCError({\n        code: 'UNAUTHORIZED',\n        message: 'Incorrect password. Try again.',\n      })\n    }\n\n    const payload = prepareTokenPayload(user)\n\n    const accessToken = jsonwebtoken.sign(payload, tokenKey, {\n      expiresIn,\n    })\n\n    return {\n      accessToken,\n    }\n  })\n","import type { AuthUser } from '@server/entities/User'\nimport z from 'zod'\n\nconst tokenPayloadSchema = z.object({\n  user: z.object({\n    id: z.number(),\n  }),\n})\n\ntype TokenPayload = z.infer<typeof tokenPayloadSchema>\n\n/**\n * Prepares the token payload for the given user.\n * @param user The authenticated user.\n * @returns The token payload containing the user information.\n */\nexport function prepareTokenPayload(user: AuthUser): TokenPayload {\n  return tokenPayloadSchema.parse({ user })\n}\n\n/**\n * Parses the payload of a verified JWT token.\n * @param tokenVerified - The verified JWT token.\n * @returns The parsed token payload.\n */\nexport function parseTokenPayload(tokenVerified: unknown): TokenPayload {\n  return tokenPayloadSchema.parse(tokenVerified)\n}\n","import { router } from '@server/trpc'\nimport signup from './signup'\nimport login from './login'\n\nexport default router({\n  signup,\n  login,\n})\n","import { Workflow } from '@server/entities'\nimport { Project, projectInsertSchema } from '@server/entities/Project'\nimport { publicProcedure } from '@server/trpc'\nimport { TRPCError } from '@trpc/server'\n\nexport default publicProcedure\n  .input(projectInsertSchema)\n  .mutation(async ({ input: projectData, ctx: { db } }) => {\n    const workflow = await db\n      .getRepository(Workflow)\n      .findOne({ where: { name: 'Default' } })\n\n    if (!workflow) {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Default workflow does not exist.',\n      })\n    }\n\n    const project = await db.getRepository(Project).create({\n      ...projectData,\n      workflow,\n    })\n\n    const projectCreated = await db.getRepository(Project).save(project)\n\n    return projectCreated\n  })\n\n// export default authenticatedProcedure\n//   .input(projectInsertSchema)\n\n//   .mutation(async ({ input: projectData, ctx: { authUser, db } }) => {\n//     const project = {\n//       ...projectData,\n//       users: [authUser],\n//     }\n\n//     const projectCreated = await db.getRepository(Project).save(project)\n\n//     return projectCreated\n//   })\n","import jsonwebtoken from 'jsonwebtoken'\nimport config from '@server/config'\nimport { buildAuthenticatedProcedure } from './buildAuthenticatedProcedure'\n\nconst { tokenKey } = config.auth\n\nconst verifyToken = (token: string) => jsonwebtoken.verify(token, tokenKey)\n\n// An example where we provide the dependency.\nexport const authenticatedProcedure = buildAuthenticatedProcedure(verifyToken)\n","import type { Jwt, JwtPayload } from 'jsonwebtoken'\nimport { z } from 'zod'\nimport { TRPCError } from '@trpc/server'\nimport { authUserSchema } from '@server/entities/User'\nimport { publicProcedure } from '..'\n\ntype VerifyToken = (token: string) => Jwt | JwtPayload | string\n\nconst tokenSchema = z.object({\n  user: authUserSchema,\n})\n\nexport function buildAuthenticatedProcedure(verify: VerifyToken) {\n  function getUserFromToken(token: string) {\n    try {\n      const tokenVerified = verify(token)\n      const tokenParsed = tokenSchema.parse(tokenVerified)\n\n      return tokenParsed.user\n    } catch (error) {\n      return null\n    }\n  }\n\n  return publicProcedure.use(({ ctx, next }) => {\n    if (ctx.authUser) {\n      return next({\n        ctx: {\n          authUser: ctx.authUser,\n        },\n      })\n    }\n\n    if (!ctx.req) {\n      throw new TRPCError({\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'Missing Express request object',\n      })\n    }\n\n    const token = ctx.req.header('Authorization')?.replace('Bearer ', '')\n\n    if (!token) {\n      throw new TRPCError({\n        code: 'UNAUTHORIZED',\n        message: 'Unauthenticated. Please log in.',\n      })\n    }\n\n    const authUser = getUserFromToken(token)\n\n    if (!authUser) {\n      throw new TRPCError({\n        code: 'UNAUTHORIZED',\n        message: 'Invalid token.',\n      })\n    }\n\n    return next({\n      ctx: {\n        authUser,\n      },\n    })\n  })\n}\n","import { Project, type ProjectBare } from '@server/entities/Project'\nimport { authenticatedProcedure } from '@server/trpc/authenticatedProcedure'\n\nexport default authenticatedProcedure.query(\n  async ({ ctx: { authUser, db } }) => {\n    const projects = (await db.getRepository(Project).find({\n      relations: ['users'],\n      where: {\n        users: { id: authUser.id },\n      },\n      order: { id: 'ASC' },\n    })) as ProjectBare[]\n\n    return projects\n  }\n)\n","import { Project, projectSchema } from '@server/entities/Project'\nimport { publicProcedure } from '@server/trpc'\nimport { TRPCError } from '@trpc/server'\n\nexport default publicProcedure\n  .input(projectSchema.shape.id)\n  .query(async ({ input: projectId, ctx: { db } }) => {\n    const project = await db.getRepository(Project).findOne({\n      where: { id: projectId },\n      relations: [\n        'issues',\n        'workflow',\n        'workflow.statuses',\n        'workflow.statuses.status',\n      ],\n    })\n\n    if (!project) {\n      throw new TRPCError({\n        code: 'NOT_FOUND',\n        message: `Project was not found`,\n      })\n    }\n\n    return project\n  })\n\n// export default authenticatedProcedure\n//   .input(projectSchema.shape.id)\n//   .query(async ({ input: projectId, ctx: { authUser, db } }) => {\n//     const project = (await db.getRepository(Project).findOne({\n//       where: { id: projectId },\n//     })) as ProjectBare\n\n//     if (!project) {\n//       throw new TRPCError({\n//         code: 'NOT_FOUND',\n//         message: `Project was not found`,\n//       })\n//     }\n\n//     const isAssigned = await db.getRepository('project_users').exists({\n//       where: { project_id: projectId, user_id: authUser.id },\n//     })\n\n//     if (!isAssigned) {\n//       throw new TRPCError({\n//         code: 'FORBIDDEN',\n//         message: `You are not allowed to access this project.`,\n//       })\n//     }\n\n//     return project\n//   })\n","import { Project } from '@server/entities'\nimport { ProjectBare } from '@server/entities/Project'\nimport { publicProcedure } from '@server/trpc'\n\nexport default publicProcedure.query(async ({ ctx: { db } }) => {\n  const projects: ProjectBare[] = (await db\n    .getRepository(Project)\n    .find()) as ProjectBare[]\n\n  return projects\n})\n","import { router } from '@server/trpc'\nimport create from './create'\nimport find from './find'\nimport get from './get'\nimport getAllByUser from './getAllByUser'\n\nexport default router({\n  create,\n  find,\n  get,\n  getAllByUser,\n})\n","import { Workflow, workflowInsertSchema } from '@server/entities/Workflow'\nimport { publicProcedure } from '@server/trpc'\n\nexport default publicProcedure\n  .input(workflowInsertSchema)\n  .mutation(async ({ input: workflowData, ctx: { db } }) => {\n    const workflow = {\n      ...workflowData,\n    }\n\n    const workflowCreated = await db.getRepository(Workflow).save(workflow)\n\n    return workflowCreated\n  })\n","import { Workflow, type WorkflowBare } from '@server/entities/Workflow'\nimport { publicProcedure } from '@server/trpc'\n\nexport default publicProcedure.query(async ({ ctx: { db } }) => {\n  const workflows = (await db.getRepository(Workflow).find({\n    order: { id: 'ASC' },\n  })) as WorkflowBare[]\n\n  return workflows\n})\n","import {\n  Workflow,\n  workflowSchema,\n  type WorkflowBare,\n} from '@server/entities/Workflow'\nimport { publicProcedure } from '@server/trpc'\nimport { TRPCError } from '@trpc/server'\n\nexport default publicProcedure\n  .input(workflowSchema.shape.id)\n  .query(async ({ input: workflowId, ctx: { db } }) => {\n    const workflow = (await db.getRepository(Workflow).findOne({\n      where: { id: workflowId },\n    })) as WorkflowBare\n\n    if (!workflow) {\n      throw new TRPCError({\n        code: 'NOT_FOUND',\n        message: `Workflow was not found`,\n      })\n    }\n\n    return workflow\n  })\n","import { router } from '@server/trpc'\nimport create from './create'\nimport find from './find'\nimport get from './get'\n\nexport default router({\n  create,\n  find,\n  get,\n})\n","import z from 'zod'\nimport { Issue, Project, WorkflowStatus } from '@server/entities'\nimport { issueInsertSchema } from '@server/entities/Issue'\nimport { projectSchema } from '@server/entities/Project'\nimport { publicProcedure } from '@server/trpc'\nimport { TRPCError } from '@trpc/server'\nimport { workflowStatusSchema } from '@server/entities/WorkflowStatus'\n\nexport const issueInputSchema = z.object({\n  projectId: projectSchema.shape.id,\n  workflowStatusId: workflowStatusSchema.shape.id,\n  issueData: issueInsertSchema,\n})\n\nexport default publicProcedure\n  .input(issueInputSchema)\n  .mutation(async ({ input, ctx: { db } }) => {\n    const project = await db\n      .getRepository(Project)\n      .findOne({ where: { id: input.projectId } })\n\n    if (!project) {\n      throw new TRPCError({\n        code: 'NOT_FOUND',\n        message: 'Project not found',\n      })\n    }\n\n    const workflowStatus = await db\n      .getRepository(WorkflowStatus)\n      .findOne({ where: { id: input.workflowStatusId } })\n\n    if (!workflowStatus) {\n      throw new TRPCError({\n        code: 'NOT_FOUND',\n        message: 'Workflow status not found',\n      })\n    }\n\n    const newIssue = await db.getRepository(Issue).create({\n      ...input.issueData,\n      project,\n      workflowStatus,\n    })\n\n    const issueCreated = await db.getRepository(Issue).save(newIssue)\n\n    return issueCreated\n  })\n\n// export default authenticatedProcedure\n//   .input(issueInsertSchema, projectSchema.shape.id)\n//   .mutation(async ({ input: issueData, ctx: { authUser, db } }) => {\n//     const project = await db\n//       .getRepository(Project)\n//       .findOne({ where: { id: projectId } })\n//     const reporter = await db\n//       .getRepository(User)\n//       .findOne({ where: { id: authUser.id } })\n\n//     if (!project) {\n//       throw new TRPCError({\n//         code: 'NOT_FOUND',\n//         message: 'Project not found',\n//       })\n//     }\n\n//     if (!isAssigned) {\n//       throw new TRPCError({\n//         code: 'FORBIDDEN',\n//         message: `You are not allowed to access this project.`,\n//       })\n//     }\n\n//     const issue = await db.getRepository(Issue).create({\n//       ...issueData,\n//       project,\n//       reporter,\n//     })\n\n//     const issueCreated = await db.getRepository(Issue).save(issue)\n\n//     return issueCreated\n//   })\n","import { Issue } from '@server/entities'\nimport { IssueBare } from '@server/entities/Issue'\nimport { projectSchema } from '@server/entities/Project'\nimport { publicProcedure } from '@server/trpc'\n\nexport default publicProcedure\n  .input(projectSchema.shape.id)\n  .query(async ({ input: projectId, ctx: { db } }) => {\n    const issues = (await db.getRepository(Issue).find({\n      where: {\n        project: { id: projectId },\n      },\n      relations: ['project'],\n    })) as IssueBare[]\n\n    return issues\n  })\n","import { Issue } from '@server/entities'\nimport { projectSchema } from '@server/entities/Project'\nimport { workflowStatusSchema } from '@server/entities/WorkflowStatus'\nimport { publicProcedure } from '@server/trpc'\nimport { z } from 'zod'\n\nexport default publicProcedure\n  .input(\n    z.object({\n      projectId: projectSchema.shape.id,\n      workflowStatusId: workflowStatusSchema.shape.id,\n    })\n  )\n  .query(async ({ input, ctx: { db } }) => {\n    const issues = db.getRepository(Issue).find({\n      relations: ['project'],\n      where: {\n        workflowStatus: { id: input.workflowStatusId },\n        project: { id: input.projectId },\n      },\n    })\n\n    return issues\n  })\n","import { router } from '@server/trpc'\nimport create from './create'\nimport getAllByProjectId from './getAllByProjectId'\nimport find from './find'\n\nexport default router({\n  create,\n  find,\n  getAllByProjectId,\n})\n","import { Status, statusInsertSchema } from '@server/entities/Status'\nimport { publicProcedure } from '@server/trpc'\n\nexport default publicProcedure\n  .input(statusInsertSchema)\n\n  .mutation(async ({ input: statusData, ctx: { db } }) => {\n    const status = {\n      ...statusData,\n    }\n\n    const statusCreated = db.getRepository(Status).save(status)\n\n    return statusCreated\n  })\n","import { Status, statusSchema, type StatusBare } from '@server/entities/Status'\nimport { publicProcedure } from '@server/trpc'\nimport { TRPCError } from '@trpc/server'\n\nexport default publicProcedure\n  .input(statusSchema.shape.id)\n  .query(async ({ input: statusId, ctx: { db } }) => {\n    const status = (await db.getRepository(Status).findOne({\n      where: { id: statusId },\n    })) as StatusBare\n\n    if (!status) {\n      throw new TRPCError({\n        code: 'NOT_FOUND',\n        message: `Status was not found`,\n      })\n    }\n\n    return status\n  })\n","import { Status, type StatusBare } from '@server/entities/Status'\nimport { publicProcedure } from '@server/trpc'\n\nexport default publicProcedure.query(async ({ ctx: { db } }) => {\n  const workflows = (await db.getRepository(Status).find({\n    order: { id: 'ASC' },\n  })) as StatusBare[]\n\n  return workflows\n})\n","import { router } from '@server/trpc'\nimport create from './create'\nimport get from './get'\nimport find from './find'\n\nexport default router({\n  create,\n  get,\n  find,\n})\n","import { router } from '../trpc'\nimport user from './user'\nimport project from './project'\nimport workflow from './workflow'\nimport issue from './issue'\nimport status from './status'\n\nexport const appRouter = router({\n  user,\n  project,\n  workflow,\n  issue,\n  status,\n})\n\nexport type AppRouter = typeof appRouter\n","import { join } from 'path'\nimport { DataSource, type DataSourceOptions } from 'typeorm'\nimport { SnakeNamingStrategy } from 'typeorm-naming-strategies'\nimport * as entities from '../entities'\n\nexport function createDatabase(options: Partial<DataSourceOptions> = {}) {\n  return new DataSource({\n    entities,\n    migrations: [relative('./migrations/**/*.ts')],\n    namingStrategy: new SnakeNamingStrategy(),\n    ...options,\n  } as any)\n}\n\nfunction relative(...paths: string[]) {\n  return join(__dirname, ...paths)\n}\n\nexport type Database = DataSource\n","import createApp from './app'\nimport { createDatabase } from './database'\nimport config from './config'\n\nconst database = createDatabase(config.database)\n\ndatabase.initialize().then(() => {\n  const app = createApp(database)\n\n  app.listen(config.port, () => {\n    // eslint-disable-next-line no-console\n    console.log(`Server is running at http://localhost:${config.port}`)\n  })\n})\n"],"mappings":"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","names":["import_express","SuperJSON","import_typeorm","import_zod","import_zod","schema","import_typeorm","import_zod","import_typeorm","import_zod","import_typeorm","import_zod","import_zod","import_typeorm","import_zod","import_typeorm","import_zod","z","import_server","bcrypt","import_bcrypt","import_server","import_zod","z","bcrypt","jsonwebtoken","import_server","import_jsonwebtoken","import_zod","import_server","tokenKey","jsonwebtoken","import_server","create_default","find_default","import_server","get_default","create_default","find_default","get_default","import_zod","import_server","z","create_default","import_zod","find_default","create_default","find_default","create_default","import_server","get_default","find_default","create_default","get_default","find_default","express","cors","import_typeorm"]}